package edu.brown.cs.ai.experiments.planning.fourrooms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import edu.brown.cs.ai.behavior.oomdp.optiondiscovery.macros.macrotraining.MacroTrainingAgent;
import edu.brown.cs.ai.behavior.oomdp.options.OptionEvaluatingRF;
import edu.brown.cs.ai.behavior.oomdp.planning.StateConditionTest;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.SDPlannerPolicy;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.SinglePFTF;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.TFGoalCondition;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.UniformCostRF;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.uninformed.dfs.LimitedMemoryDFS;
import edu.brown.cs.ai.domain.oomdp.fourrooms.FourRoomsDomain;
import edu.umbc.cs.maple.behavior.oomdp.Policy;
import edu.umbc.cs.maple.oomdp.Attribute;
import edu.umbc.cs.maple.oomdp.Domain;
import edu.umbc.cs.maple.oomdp.RewardFunction;
import edu.umbc.cs.maple.oomdp.State;
import edu.umbc.cs.maple.oomdp.TerminalFunction;

public class FourRoomsMacroTrainingExp {

	public MacroTrainingAgent							mta;
	
	protected Domain 									d;
	protected Map<String, List<Attribute>> 				attributesForHashCode;
	protected TerminalFunction 							tf;
	protected RewardFunction							rf;
	protected StateConditionTest						gc;
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		FourRoomsMacroTrainingExp exp = new FourRoomsMacroTrainingExp();
		
		//exp.plan("T0,0", 1, 11, 6, 9);
		//exp.plan("T1,0", 1, 11, 9, 5);
		//exp.plan("T2,0", 1, 11, 11, 1);

		/*
		exp.plan("T0,0", 1, 11, 4, 9);
		exp.plan("T1,0", 1, 11, 7, 7);
		exp.plan("T2,0", 1, 11, 9, 4);
		exp.plan("T3,0", 1, 11, 11, 1);
		
		
		exp.mta.resetNumTotalVisits();
		
		exp.plan("T0,1", 1, 11, 2, 7);
		exp.plan("T1,1", 1, 11, 4, 4);
		exp.plan("T2,1", 1, 11, 7, 2);
		exp.plan("T3,1", 1, 11, 7, 1);
		
		
		exp.mta.resetNumTotalVisits();
		
		exp.plan("T1,2", 1, 11, 8, 10);
		exp.plan("T2,2", 1, 11, 11, 11);
		*/
		
		//exp.plan("T2,2", 1, 11, 11, 11);
		//exp.plan("T2,2", 1, 11, 7, 1);
		
		//exp.planWithMLDFS(1, 11, 11, 1, 20, 61);
		
		
		
	}
	
	
	public FourRoomsMacroTrainingExp(){
		
		d = (new FourRoomsDomain()).generateDomain();
		
		attributesForHashCode = new HashMap<String, List<Attribute>>();
		
		List <Attribute> agentAtts = new ArrayList<Attribute>();
		agentAtts.add(d.getAttribute(FourRoomsDomain.ATTX));
		agentAtts.add(d.getAttribute(FourRoomsDomain.ATTY));
		attributesForHashCode.put(FourRoomsDomain.CLASSAGENT, agentAtts);
		
		List <Attribute> goalAtts = new ArrayList<Attribute>(agentAtts);
		attributesForHashCode.put(FourRoomsDomain.CLASSGOAL, goalAtts);
		
		tf = new SinglePFTF(d.getPropFunction(FourRoomsDomain.PFATGOAL));
		gc = new TFGoalCondition(tf);
		rf = new OptionEvaluatingRF(new UniformCostRF());
		
		mta = new MacroTrainingAgent(d, attributesForHashCode, 5);
		
	}
	
	
	public void plan(String taskName, int ax, int ay, int gx, int gy){
		
		State s = FourRoomsDomain.getCleanState();
		FourRoomsDomain.setAgent(s, ax, ay);
		FourRoomsDomain.setGoal(s, gx, gy);
		
		mta.defineAndSetTask(taskName, tf, gc);
		mta.planFromState(s);
		
		Policy p = mta.getPolicyForCurrentTask();
		p.evaluateMethodsShouldDecomposeOption(false);
		System.out.println("Total agent visits: " + mta.getNumTotalVisits());
		System.out.println("Plan: " + p.evaluateBehavior(s, rf, tf).getActionSequenceString());
		System.out.println("===");
		
	}
	
	
	public void planWithMLDFS(int ax, int ay, int gx, int gy, int depthLimit, int memoryLimit){
		
		LimitedMemoryDFS lmdfs = new LimitedMemoryDFS(d, rf, gc, attributesForHashCode, depthLimit, false, false, memoryLimit);
		
		State s = FourRoomsDomain.getCleanState();
		FourRoomsDomain.setAgent(s, ax, ay);
		FourRoomsDomain.setGoal(s, gx, gy);
		
		lmdfs.planFromState(s);
		
		Policy p = new SDPlannerPolicy(lmdfs);
		p.evaluateMethodsShouldDecomposeOption(false);
		System.out.println("Plan: " + p.evaluateBehavior(s, rf, tf).getActionSequenceString());
		System.out.println("===");
		
	}
	
	

}
