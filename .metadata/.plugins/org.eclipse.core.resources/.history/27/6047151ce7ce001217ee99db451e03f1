package edu.brown.cs.ai.behavior.oomdp.planning.deterministc.informed.rollouts;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import edu.brown.cs.ai.behavior.oomdp.planning.StateConditionTest;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.SearchNode;
import edu.brown.cs.ai.behavior.oomdp.planning.deterministc.informed.PrioritizedSearchNode;
import edu.umbc.cs.maple.behavior.oomdp.planning.StateHashTuple;
import edu.umbc.cs.maple.oomdp.Attribute;
import edu.umbc.cs.maple.oomdp.Domain;
import edu.umbc.cs.maple.oomdp.GroundedAction;
import edu.umbc.cs.maple.oomdp.RewardFunction;

public class ABRDLSample extends ABRSample {

	protected int maxDepth;
	
	public ABRDLSample(Domain domain, RewardFunction rf, StateConditionTest gc,
			Map<String, List<Attribute>> attributesForHashCode, ActionBias abias, int maxDepth) {
		super(domain, rf, gc, attributesForHashCode, abias);
		this.maxDepth = maxDepth;
	}

	
	
	@Override
	protected PrioritizedSearchNode PSNFactory(StateHashTuple sh, double priority){
		return new DepthTrackingPrioritizedSearchNode(sh, priority);
	}
	
	@Override
	protected PrioritizedSearchNode PSNFactory(StateHashTuple sh, GroundedAction ga, PrioritizedSearchNode bp, double priority){
		DepthTrackingPrioritizedSearchNode dbp = (DepthTrackingPrioritizedSearchNode)bp;
		return new DepthTrackingPrioritizedSearchNode(sh, ga, bp, priority, dbp.depth+1);
	}
	
	
	@Override
	protected boolean pathABetterThanB(PrioritizedSearchNode a, PrioritizedSearchNode b) {
		DepthTrackingPrioritizedSearchNode da = (DepthTrackingPrioritizedSearchNode)a;
		DepthTrackingPrioritizedSearchNode db = (DepthTrackingPrioritizedSearchNode)b;
		return da.depth < db.depth;
	}
	
	
	@Override
	public List<PrioritizedSearchNode> generateSuccessors(PrioritizedSearchNode psn){
		DepthTrackingPrioritizedSearchNode dpsn = (DepthTrackingPrioritizedSearchNode)psn;
		if(dpsn.depth >= this.maxDepth){
			return new ArrayList<PrioritizedSearchNode>();
		}
	}
	
	
	protected static class DepthTrackingPrioritizedSearchNode extends PrioritizedSearchNode{
		
		public int depth;
		
		public DepthTrackingPrioritizedSearchNode(StateHashTuple s, double p){
			super(s,p);
			this.depth = 0;
		}
		
		
		public DepthTrackingPrioritizedSearchNode(StateHashTuple s, GroundedAction ga, double p, int d){
			super(s,ga,p);
			this.depth = d;
		}
		
		public DepthTrackingPrioritizedSearchNode(StateHashTuple s, GroundedAction ga, SearchNode bp, double p, int d){
			super(s,ga,bp,p);
			this.depth = d;
		}
		
		
	}
	

}
