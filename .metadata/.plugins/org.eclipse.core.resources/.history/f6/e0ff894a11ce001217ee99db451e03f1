package edu.brown.cs.ai.behavior.oomdp.optiondiscovery.macros;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import edu.brown.cs.ai.behavior.oomdp.options.MacroAction;
import edu.umbc.cs.maple.behavior.oomdp.EpisodeAnalysis;
import edu.umbc.cs.maple.behavior.oomdp.Policy;
import edu.umbc.cs.maple.oomdp.GroundedAction;
import edu.umbc.cs.maple.oomdp.RewardFunction;
import edu.umbc.cs.maple.oomdp.State;
import edu.umbc.cs.maple.oomdp.TerminalFunction;

public class AllSequenceExtraction {

	
	
	public static List <MacroAction> getAllMacroSubsequences(int maxSN, State s, Policy p, TerminalFunction tf){
		
		p.evaluateMethodsShouldDecomposeOption(true);
		p.evaluateMethodsShouldAnnotateOptionDecomposition(false);
		
		EpisodeAnalysis ea = p.evaluateBehavior(s, new NullReward(), tf);
		
		List <GroundedAction> uniqueIndex = new ArrayList<GroundedAction>();
		Map <String, Integer> actionToIndex = new HashMap<String, Integer>();
		
		getActionIdentifiers(ea.actionSequence, uniqueIndex, actionToIndex);
		List <Integer> actionIdSequence = convertActionsToIntegers(ea.actionSequence, actionToIndex);
		
		Set <String> subsequences = new HashSet<String>();
		
		maxSN = Math.min(maxSN, ea.numTimeSteps()-1);
		
		for(int i = 2; i <= maxSN; i++){
			addUniqueSubsequencesOfSize(i, actionIdSequence, subsequences);
		}
		
		
		List <MacroAction> macros = new ArrayList<MacroAction>(subsequences.size());
		for(String uniqueSub : subsequences){
			List <GroundedAction> subGASeq = getActionSequenceForStringSubsequence(uniqueSub, uniqueIndex);
			MacroAction macro = new MacroAction(subGASeq);
			macros.add(macro);
		}
		
		
		
		return macros;
		
	}
	
	
	protected static void getActionIdentifiers(List <GroundedAction> actionSequence, List <GroundedAction> uniqueIndex, Map<String, Integer> actionToIndex){
		
		for(GroundedAction ga : actionSequence){
			String aname = ga.action.getName();

			if(!actionToIndex.containsKey(aname)){
				actionToIndex.put(aname, uniqueIndex.size());
				uniqueIndex.add(ga);
			}
		}
		
	}
	
	protected static List <Integer> convertActionsToIntegers(List <GroundedAction> actionSequnece, Map <String, Integer> actionToIndex){
		
		List <Integer> res = new ArrayList<Integer>(actionSequnece.size());
		
		for(GroundedAction ga : actionSequnece){
			res.add(actionToIndex.get(ga.action.getName()));
		}
		
		return res;

	}
	
	protected static void addUniqueSubsequencesOfSize(int n , List <Integer> sequence, Set <String> uniqueSubSequences){
		
		for(int i = 0; i < sequence.size()-n; i++){
			int e = i + n;
			StringBuffer buf = new StringBuffer(n*2);
			buf.append(sequence.get(i));
			for(int j = i+1; j < e; j++){
				buf.append(",");
				buf.append(sequence.get(j));
			}
			uniqueSubSequences.add(buf.toString());
		}
		
	}
	
	protected static List <GroundedAction> getActionSequenceForStringSubsequence(String seq, List <GroundedAction> uniqueIndex){
		
		List <GroundedAction> actionSequence = new ArrayList<GroundedAction>();
		
		String [] comps = seq.split(",");
		for(int i = 0; i < comps.length; i++){
			int ind = Integer.parseInt(comps[i]);
			actionSequence.add(uniqueIndex.get(ind));
		}
		
		return actionSequence;
		
	}
	
	
	
	
	protected static class NullReward extends RewardFunction{

		@Override
		public double reward(State s, GroundedAction a, State sprime) {
			return 0;
		}
		
		
		
	}
	
}
